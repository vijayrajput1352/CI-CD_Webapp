version: '3.6'
services:
  rabbit:
    #image: rabbitmq:3-management
    build: ./docker
    restart: always
    volumes:
    - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    - ./definitions.json:/etc/rabbitmq/definitions.json:ro
    ports:
    - '5672:5672'
    - '15672:15672'
    build: ./docker
  redis-overcommit:
     build: https://github.com/bkuhl/redis-overcommit-on-host.git
     restart: 'no'
     privileged: true
     volumes:
        - /proc/sys/vm:/mnt/vm
  redis:
     image: 'redis'
     restart: 'always'
     ports:
        - 6379:6379
     command: redis-server /usr/local/etc/redis/redis.conf
     environment:
        notify-keyspace-events: "KEA"
     depends_on:
        - redis-overcommit
     volumes:
        - .redis.conf:/usr/local/etc/redis/redis.conf
  postgres:
      image: postgres:13
      ports:
         - "5432:5432"
      restart: always
      environment:
         POSTGRES_USER: plantworks
         POSTGRES_DB: plantworks
         POSTGRES_PASSWORD: plantworks
         POSTGRES_DB_INITDB_ARGS: -A md5
         # POSTGRES_HOST_AUTH_METHOD: md5
      volumes:
         - ./postgres-data:/var/lib/postgresql/data
           #        elassandra:
           # image: strapdata/elassandra
           #  ports:
           #  - "9042:9042"
           # - "9200:9200"
           # volumes:
           #  - ./my/own/datadir:/var/lib/cassandra
  node:
      depends_on:
         - postgres
           #  - elassandra
         - rabbit
         - redis
      build: .
      restart: always
      image: nodejs
      container_name: nodejs
      extra_hosts:
         - "plant.works:127.0.0.1"
      ports:
         - 9100:9100
      environment:
         SEQ_DB: plantworks
         SEQ_USER: plantworks
         SEQ_PW: plantworks
         PORT: 9100
         # DATABASE_URL: postgres://username:pgpassword@127.0.0.1:5432/mydatabase
         DATABASE_URL: "postgres://plantworks:plantworks@postgres:5432/plantworks"
         # persisetence:
         # depends_on:
         # - node
         # build: ../persistence-server
         # container_name: persistence-server
         #report:
         # depends_on:
         # - node
         # - persisetence
         # - downtime
         # - replay
         # build: ../report-server
         # container_name: report-server
         #downtime:
         # depends_on:
         #  - node
         # - persisetence
         #  build: ../downtime-recorder
         # container_name: downtime-recorder
         # replay:
         # depends_on:
         # - node
         # - persisetence
         # - downtime
         # build: ../replay-server
         # container_name: replay
         #alert:
         # depends_on:
         # - node
         # - persisetence
         #        - downtime
         # - replay
         # - report
         # build: ../alert-server
         # container_name: alert-server
         # webhook:
         # depends_on:
         # - node
         # - persisetence
         # - downtime
         # - replay
         # - report
         # - alert
         # build: ../webhook-server
         # container_name: webhook-server
#   tenantseed:
      # depends_on:
      #    - node
      #    - persisetence
      #    - downtime
      #    - replay
      #    - report
      #    - alert
      #    - webhook
      # build: ../tenant_seeds
  # node:
  #     image: "docker.io/strapdata/elassandra:6.8.4.3"
  #     environment:
  #       - "JVM_OPTS=-Dcassandra.custom_query_handler_class=org.elassandra.index.ElasticQueryHandler"
  #       - "MAX_HEAP_SIZE=1200m"
  #       - "HEAP_NEWSIZE=300m"
  #       - "CASSANDRA_CGROUP_MEMORY_LIMIT=true"
  #       - "CASSANDRA_SEEDS=seed_node"
  #       - "DEBUG=true"
  #     links:
  #       - seed_node
  #     cap_add:
  #       - IPC_LOCK
  #     ulimits:
  #       memlock: -1
  #       mem_limit: 2000m
  # kibana:
  #     image: docker.elastic.co/kibana/kibana-oss:6.8.4
  #     environment:
  #       - "ELASTICSEARCH_URL=http://seed_node:9200"
  #     ports:
  #       - "5601:5601"
  #     mem_limit: 500m




